setwd("...")
library(tidyverse)
library(Matrix)
library(xgboost)
library(magrittr)
library(ElemStatLearn)
library(caret)

#prepare the library and the data
data_full <- read.csv("data.csv",header = TRUE)

#devided the data to two groups (train & test)
set.seed(1234)
ind <- sample(2, nrow(data_full), replace = T, prob = c(0.75, 0.25))
bst.train <- data_full[ind == 1,]
bst.test <- data_full[ind == 2,]

#prepare the data for XGBoost model
model_martix_train <- model.matrix(GIST~.-1, bst.train)
model_martix_test <- model.matrix(GIST~.-1, bst.test)
data_train <- xgb.DMatrix(model_martix_train, label = bst.train$GIST)
data_test <- xgb.DMatrix(model_martix_test, label = bst.test$GIST)

#find the best parameter
grid = expand.grid(
        nrounds = c(75, 100, 200), 
        colsample_bytree = 1, 
        min_child_weight = 1, 
        eta = c(0.01, 0.1, 0.3, 1), 
        gamma = c(0.5, 0.25), 
        subsample = 0.5, 
        max_depth = c(2, 3)
)
cntrl = trainControl(
        method = "cv", 
        number = 5, 
        verboseIter = TRUE, 
        returnData = FALSE, 
        returnResamp = "final"
)
set.seed(1)
train.xgb = train(
        x = data_full[, 2:7], 
        y = data_full[, 1], 
        trControl = cntrl, 
        tuneGrid = grid, 
        method = "xgbTree"
)
train.xgb$bestTune

#set the best parameter and train the model
param <- list(max_depth = 2, eta = 0.1, silent = 1, 
              nthread = 2, gamma = 0.5,
              objective = "reg:linear", eva_metric = "auc")
try_xgb_model <- xgb.train(param, data_train, nrounds = 200) 

#Accurcy
pre_xgb <- round(predict(try_xgb_model,newdata = data_test))
(AC <- table(bst.test$GIST, pre_xgb,dnn=c("true","pre")))
(Accurcy <- (AC[1,1]+AC[2,2])/sum(AC))

#Importance of the Features
imp <- xgb.importance(colnames(data_train), model = try_xgb_model)
print(imp)
xgb.ggplot.importance(imp)

#use DALEX package to explain the model
library(DALEX)

#build an explainer
explainer_xgb <-explain(try_xgb_model, 
                        data = model_martix_train, 
                        y = bst.train$GIST, 
                        label = "xgboost")
explainer_xgb

#partial dependency of every feature
CTV_xgb_model_effect <- variable_effect(explainer_xgb, 
                                        variable = "CT.Value", 
                                        type = "partial_dependency")
head(CTV_xgb_model_effect)
plot(CTV_xgb_model_effect)

APE_xgb_model_effect <- variable_effect(explainer_xgb, 
                                        variable = "Arterial.Phase.Enhancement", 
                                        type = "partial_dependency")
head(APE_xgb_model_effect)
plot(APE_xgb_model_effect)

VPE_xgb_model_effect <- variable_effect(explainer_xgb, 
                                        variable = "Venous.Phase.Enhancement", 
                                        type = "partial_dependency")
head(VPE_xgb_model_effect)
plot(VPE_xgb_model_effect)

LSD_xgb_model_effect <- variable_effect(explainer_xgb, 
                                        variable = "Long.Short.Diameter", 
                                        type = "partial_dependency")
head(LSD_xgb_model_effect)
plot(LSD_xgb_model_effect)

HGE_xgb_model_effect <- variable_effect(explainer_xgb, 
                                        variable = "HomogeneouslyEnhanced", 
                                        type = "partial_dependency")
head(HGE_xgb_model_effect)
plot(HGE_xgb_model_effect)

CAL_xgb_model_effect <- variable_effect(explainer_xgb, 
                                        variable = "Calcification", 
                                        type = "partial_dependency")
head(CAL_xgb_model_effect)
plot(CAL_xgb_model_effect)

#use Hmisc package to calculate C-index
library(Hmisc)
x.test <- as.matrix(bst.test[, 2:7])
fp <- predict(try_xgb_model, x.test)
cindex.orig=rcorr.cens(fp,y.test) [[1]]
cindex.orig

#use InformationValue package to plot the ROC curve and calculate auROC
library(InformationValue)
xg.testMat <- as.matrix(bst.test[,2:7])
xg.xg.test <- predict(try_xgb_model, rf.testMat)
y.test <- bst.test[, 1]
plotROC(y.test, xg.xg.test)
